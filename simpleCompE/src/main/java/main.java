import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.util.*;
import java.io.IOException;
import mylanguage.*;

public class main {
    public static void main(String[] args) throws IOException{


        String filename="input.txt";

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        simplelangLexer lex = new simplelangLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        simplelangParser parser = new simplelangParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        Double result=interpreter.visit(parseTree);

        System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "simplelangVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simplelangVisitor<Double> {
    private boolean toBool(Double x){
        boolean flag = true;
        if (x == 0){
            flag = false;
        }
        return flag;
    }
    // An environment mapping variablenames to double values (initially empty)
    public static HashMap<String,Double> env=new HashMap<String,Double>();


    //Start rule visitor
    public Double visitStart(simplelangParser.StartContext ctx){
        // New implementation: visit all assignments:
        for (simplelangParser.ProgContext p:ctx.p)
            visit(p);
        return visit(ctx.e);
    };

    //Program visitors
    public Double visitSingle(simplelangParser.SingleContext ctx){
        visit(ctx.s);
        return null;
    };

    public Double visitSequence(simplelangParser.SequenceContext ctx){
        for (simplelangParser.StmtContext s:ctx.s)
            visit(s);
        return null;
    }


    //Statement visitors
    public Double visitAssignment(simplelangParser.AssignmentContext ctx){
        // New implementation: evaluate the expression and store it in the environment for the given
        // variable name
        String varname=ctx.x.getText();
        Double v = visit(ctx.e);
        env.put(varname,v);

        return v;
    };

    public Double visitIf(simplelangParser.IfContext ctx){
        boolean condition = toBool(visit(ctx.c));
        if(condition){
            return visit(ctx.p);
        }

        return null;
    }

    public Double visitIfElse(simplelangParser.IfElseContext ctx){
        boolean condition = toBool(visit(ctx.c));
        if (condition) {
            return visit(ctx.p1);
        }
        return visit(ctx.p2);
    }

    public Double visitWhile(simplelangParser.WhileContext ctx){
        boolean condition;
        while (condition = toBool(visit(ctx.c))){
            visit(ctx.p);
        }
        return null;
    }

    //conditional visitors
    public Double visitNot(simplelangParser.NotContext ctx){
        Double x = visit(ctx.c);
        boolean flag = toBool(x);
        if(flag){
            return new Double(0);
        }
        return new Double(1);
    }

    public Double visitAnd(simplelangParser.AndContext ctx){
        Double x1 = visit(ctx.c1);
        Double x2 = visit(ctx.c2);
        boolean flag1, flag2;

        flag1 = toBool(x1);
        flag2 = toBool(x2);

        if (flag1 && flag2){
            return new Double(1);
        }
        return new Double(0);
    }
    public Double visitOr(simplelangParser.OrContext ctx){
        Double x1 = visit(ctx.c1);
        Double x2 = visit(ctx.c2);
        boolean flag1, flag2;

        flag1 = toBool(x1);
        flag2 = toBool(x2);

        if (flag1 || flag2){
            return new Double(1);
        }
        return new Double(0);
    }

    public Double visitCondition(simplelangParser.ConditionContext ctx){
        Double d1 = visit(ctx.e1);
        Double d2 = visit(ctx.e2);
        int x1 = d1.intValue();
        int x2 = d2.intValue();

        boolean flag1, flag2;

        String c = ctx.c.getText();
        if(c.equals("==")){
            if(x1 == x2){
                return new Double(1);
            }
            return new Double(0);
        }

        if(c.equals("!=")){
            if(x1 != x2){
                return new Double(1);
            }
            return new Double(0);
        }

        if(c.equals("<")){
            if(x1 < x2){
                return new Double(1);
            }
            return new Double(0);
        }

        if(c.equals(">")){
            if(x1 > x2){
                return new Double(1);
            }
            return new Double(0);
        }

        if(c.equals(">=")){
            if(x1 >= x2){
                return new Double(1);
            }
            return new Double(0);
        }

        if(c.equals("<=")){
            if(x1 <= x2){
                return new Double(1);
            }
            return new Double(0);
        }
        return null;
    }

    //Expression visitors
    public Double visitParenthesis(simplelangParser.ParenthesisContext ctx){
        return visit(ctx.e);
    };

    public Double visitVariable(simplelangParser.VariableContext ctx){
        // New implementation: look up the value of the variable in the environment env:
        String varname=ctx.x.getText();
        Double d=env.get(varname);
        if (d==null){
            System.err.println("Variable "+varname+" is not defined.\n");
            System.exit(-1);
        }
        return d;
    };

    public Double visitAddition(simplelangParser.AdditionContext ctx){
        if (ctx.op.getText().equals("+"))
            return visit(ctx.e1)+visit(ctx.e2);
        else
            return visit(ctx.e1)-visit(ctx.e2 );
    };

    public Double visitMultiplication(simplelangParser.MultiplicationContext ctx){
        if (ctx.op.getText().equals("*"))
            return visit(ctx.e1)*visit(ctx.e2);
        else if(ctx.op.getText().equals("%")){
            return visit(ctx.e1)%visit(ctx.e2);
        }
        else
            return visit(ctx.e1)/visit(ctx.e2);
    };

    public Double visitConstant(simplelangParser.ConstantContext ctx){
        return Double.parseDouble(ctx.c.getText());
    };

    public Double visitSignedConstant(simplelangParser.SignedConstantContext ctx){
        return Double.parseDouble(ctx.getText());
    };


}

